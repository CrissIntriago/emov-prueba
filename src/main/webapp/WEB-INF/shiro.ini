[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
authc.loginUrl = /login
authc.successUrl = /procesos/bandeja-tareas
roles.unauthorizedUrl = /access-denied.xhtml

urlFilter = com.origami.sigef.common.config.AppUrlAuthorizationFilter
ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

#DataSource Setup
ds = org.apache.shiro.jndi.JndiObjectFactory
ds.requiredType = javax.sql.DataSource
ds.resourceName = /jdbc/postgresql
ds.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT contrasenia FROM auth.usuarios  WHERE usuario = ? AND estado = true
jdbcRealm.userRolesQuery = SELECT rol.nombre FROM auth.usuario_rol r INNER JOIN auth.usuarios u on u.id = r.usuario INNER JOIN auth.rol ON rol.id = r.rol WHERE u.usuario = ?
jdbcRealm.permissionsQuery = SELECT rol.nombre FROM auth.usuario_rol r INNER JOIN auth.usuarios u on u.id = r.usuario INNER JOIN auth.rol ON rol.id = r.rol WHERE u.usuario = ?
#jdbcRealm.permissionsQuery = SELECT p.permiso FROM rol r,rol_permiso rp, permiso p WHERE rp.id_rol = r.id AND rp.id_permiso = p.id AND r.rol = ?

jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $ds

securityManager.realms = $jdbcRealm
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

# Filter Setup
[urls]
/api/** = anon
/javax.faces.resource/** = anon
/facelet/recover/** = anon
/TransaccionesBDP** = anon
/WSProdubanco** = anon
/faces/login.xhtml = authc
/logout = logout
/** = authc